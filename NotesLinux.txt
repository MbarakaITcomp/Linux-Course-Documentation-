Kernel Functions : 

 Managing the machine's memory and allocating it to each process. 
 Scheduling the work done by the CPU so that the work of each user is carried out as efficiently as is possible. 
 Accomplishing the transfer of data from one part of the machine to another 
 Interpreting and executing instructions from the shell 
 Enforcing file access permissions

Linux Kernel : 
 
 Process management
 Memory management
 Hardware device drivers
 Filesystem drivers
 Network management
 Various other bits and pieces


OS functions : 

 In a multitasking operating system where multiple programs can be running at the same time, 
the operating system determines which applications should run in what order and how much 
time should be allowed for each application before giving another application a turn.
 It manages the sharing of internal memory among multiple applications.
 It handles input and output to and from attached hardware devices, such as hard disks, printers, 
and dial-up ports. 
 It sends messages to each application or interactive user (or to a system operator) about the status 
of operation and any errors that may have occurred.
 It can offload the management of what are called batch jobs (for example, printing) so that the 
initiating application is freed from this work.
 On computers that can provide parallel processing, an operating system can manage how to 
divide the program so that it runs on more than one processor at a time.


OS Programs & Kernel : 

-UNIX and 'UNIX-like' operating systems (such as Linux) consist of a kernel and some system programs. 
There are also some application programs for doing work. The kernel is the heart of the operating system. 
In fact, it is often mistakenly considered to be the operating system itself, but it is not. An operating 
system provides many more services than a plain kernel.
It keeps track of files on the disk, starts programs and runs them concurrently, assigns memory and other 
resources to various processes, receives packets from and sends packets to the network, and so on. The 
kernel does very little by itself, but it provides tools with which all services can be built. It also prevents 
anyone from accessing the hardware directly, forcing everyone to use the tools it provides. This way the 
kernel provides some protection for users from each other. The tools provided by the kernel are used via 
system calls. 
The system programs use the tools provided by the kernel to implement the various services required 
from an operating system. System programs, and all other programs, run `on top of the kernel', in what is 
called the user mode. The difference between system and application programs is one of intent: 
applications are intended for getting useful things done (or for playing, if it happens to be a game), 
whereas system programs are needed to get the system working. A word processor is an application; 
mount is a system program. The difference is often somewhat blurry, however, and is important only to 
compulsive categorizers.



Links (persist on remove): 

    - Soft Links : like shortcuts ---> points to sourcefile --which--> points to data stored in the storage device ( no data on src removing)
    - Hard Links : points directly to data stored in the storage device ( data persistance on src removing)

    - $ln -s src_file dist_file  ---> for soft lik creation
    - $ln src_file dist_file  ---> for hard lik creation




################################################################################## Commands Store ###############################################################################################################################################


ACLs ( Access list Control):

    - Add Permission to a User : $setfacl -m u:{user}:rwx /path/to/file


Tar :

    - $tar cvf {tar_file} files_to_tar

Extract Tar : 

    - $tar xvf {tar_file}

Achrive & Compression at the same time : 

    - $tar -cvzf tar_file.tar.gz files_to_tar

gzip : 

    - $gzip options{-k=keep input files,-d=decompress,} {tar_file}


sed : 
    // This not for a permenant change :
    - $sed 's/str_to_replace/replacement/{g}' file_name
    // g ---> stands for global pattern matching

    // for a permenant change : 
    - $sed -i 's/str_to_replace/replacement/' file_name



######################################      User & group management :  ###############################

    - Creation & Edit & Delete : 

        - $useradd {user_name} : add a user - options : {-g=primary_group / -s=shell / -m=home_dir / -G=secondary_groups}
        - $userdel {user_name} : delete a user - options : {--remove ---> remove all file & home dir}
        - $usermod {user_name} : modify a user - options : {-L --> desable account / -s=shell / -m=home_dir / -G=secondary_groups}
        - $passwd {user_name} : for initializing the account by setting up a password to it
        - $gpasswd {user_name} : add,remove user from a group
        
    --- Note ---
            - default values used by useradd are located in : /etc/default/useradd

        - $groupadd : add a group 
        - $groupdel : delete a group 

    - Edit User Informations : 

        - id {user_name} ----> print out user_id, p_group , s_groups 
        - $chfn ----> change full name , office , phone number , ...
        - $chsh ----> change default shell 





Login Aging ( Important for Sec Issues) : 

    - file location : /etc/login.defs
    - Useful Params : 
        - PASS_MAX_DAYS	99999
        - PASS_MIN_LEN 8
        - PASS_MIN_DAYS	0
        - PASS_WARN_AGE	7
        - UID_MIN 1000
        - UID_MAX 60000
        - UMASK 077 /// Permission when the user creates files
        ....

chage : // change user password expiry information

    - $chage options{-m=Min_days / -M=Max_day ---> to change the password / -W=warning / -I=Inactif_Acc_after_pwd_expire}
    - $chage -l {user_name} : information about password (expire, max length, ....)


Monitor users : tcp

    - $who /// Print information about users who are currently logged in {date,terminal,processes,boot_time}
        
        - Some options : -q=all login names and number of users logged on

    - $last /// prints logging  and shutdown/reboot history of users
    
        - Some options : -w=Display full user names and domain names / -x=Display the system shutdown entries and run level changes.
            - ex : $ last | more 

    - $w  /// same as who with more details
    - $finger /// powerfull program to track users


Talk to users : 

    - $wall // Broadcast message to all users 
    - $write {user_name}  // unicast message to specified user



  ################################################## System part ##############################################


Note : 
    - Process : got an end
    - Deamon : service/process wich runs in the backround continuously [firewalld.service] (identifyed by letter d at the end of the file_name)


Services management : 

    - $systemctl options{start,stop,status,restart,reload,enable(at boot),disable}
    - $systemctl list-unit

Process Informations : 

    - $ps options{-aux'=all infos / -ef= as aux with full format} user_name
        - example : 
                
                - $ps -eo 'user,pid,nice,cmd'
                - $ps -u {user} -----> print user's specific processes
                - $ps aux --sort=-{%cpu,%mem} ----> sorting by cpu or mem time
        
        - Process State Code : 
          
                        D    uninterruptible sleep (usually IO)
                        R    running or runnable (on run queue)
                        S    interruptible sleep (waiting for an event to complete)
                        T    stopped by job control signal
                        t    stopped by debugger during the tracing
                        W    paging (not valid since the 2.6.xx kernel)
                        X    dead (should never be seen)
                        Z    defunct ("zombie") process, terminated but not reaped by its parent

                For BSD formats and when the stat keyword is used, additional
                characters may be displayed:

                        <    high-priority (not nice to other users)
                        N    low-priority (nice to other users)
                        L    has pages locked into memory (for real-time and custom IO)
                        s    is a session leader
                        l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads
                                do)
                        +    is in the foreground process group 

Note : 
    - $at is similar to crontab except that it's a one time scheduling cmd

    - $nice -n {value(smaller the better)} ProcessName
    - $renice [value] -p 'PID'


System Monitoring : 

    - $df options{-h=humain readble} /// report file system disk usage
    - $du -sh {dir} : gives the occupied disk space by the dir provided
    - $dmesg /// examine or control the kernel components ( devices , error,memory,....)
    - $iostat /// to monitor input/output 
    - $netstat options{-rnv = kernel routing table }
    - $top ---> like ps but in real time & sorts by cpu usage
    - $free options{-g = display in gigabytes }/// Display amount of free and used memory in the system
    - /proc/ Directory  ---> this folder has all system infos 
        - $cat /proc/[cpuonfo-meminfo]

    - logs : 
            - /etc/rsyslog.conf  | /etc/rsyslog.d.conf  ----> configuration files 
            - /var/log/ Directory  ---> this folder has all system logs

                    /var/log/messages  : Most syslog messages are logged here. The exceptions are messages related to authentication and email processing, that periodically run jobs, and those which are purely debugging related.
                    /var/log/secure The log file for security and authentication-related messages and errors.
                    /var/log/maillog The log file with mail server-related messages.
                    /var/log/cron The log file related to periodically executed tasks.
                    /var/log/boot.log Messages related to system startup are logged here.
            
            - Test rsyslog  ----> logger -p local7.notice "Log entry created on serverX"

            - $journalctl options{-b-->last_boot_time, -n=number_of_line, -p=priority, --since="date" , --until "date", -o=verbose} ----> shows the full system journal, starting with the oldest log entry, when run as root user
                    - $man systemd.journal-fields  ----> commonly used journal fields


    - /etc/redhat-release ----> this file provides os version
    - $uname -a ----> OS infos
    - $dmidecode ----> Provides every infos about the hardware
    - $journalctl -xeu {service_name} -----> provides logs on status of the service 
    - $stat {file_name} -----> infos about owner, last access and modification,.... .
    


    - Memory Monitoring : 
        - $swapon -s -----> list swap devices
        - $vmstat -----> monitoring virtual memory? swap, paging
        - File for Info (paging , virtual memory,....) : 
            - /proc/<pid>/smaps  ( rss property ----> how much paging is in physical ram) -----> infos about all memory segments
            - /proc/meminfo 


    - Graphical Interface : 

        - $cockpit 

    - Processes Priority types : 
            1\ system priority (PR) ( [0 to 139]  0 to 99 --> for real time process & 99 to 139 for users ) : is the actual priority for linux kernel to use
            2\ nice (cmd) priority (NI) ( [-20 to 20]  0 --> is default )  : is a user space priority




###################################################### Network Monitoring : ########################################################

                    --- /etc/sysconfig/network-scripts/ifcfg-<interface_name>

    - $tcpdump  options{-i=interface_name}-----> Network Traffic in real time 
    - $ethtool {interface_name}   -------> NIC Informations
    - $ip address show
    - $dig ------> dns lookup utility
    - $nslookup  ----> preform dns/reversedns queries  

    To See active ports on the system : 

        - $netstat -tunlp -----> to see services & their listening on ports (provides the IPs also ....)

    Network Utilities : 

        - $nmtui ----> desactivate/activate a connection - edit Interfaces - edit hostname - show Interfaces Infos
        - $nmcli  ----> cli for network editing 
        - $nm-connection-editor   -----> gui for connection editng (ip,name,.....)

        nmcli usefull cmds :

            nmcli dev status	: Show the Network Manager status of all network interfaces
            nmcli con show	: List all connections
            nmcli con show : name List the current settings for the connection name
            nmcli con add con-name {name} ..	: Add a new connection named name
            nmcli con mod {name} ..	: Modify the connection name
            nmcli con reload	: Tell networkManager to reread the configuration files (useful after they have been edited by hand)
            nmcli con up {name}	: Activate the connection name
            nmcli dev dis {dev}	: Deactivate and disconnect the current connection on the network interface dev
            nmcli con del {name}	: Delete the connection name and its configuration file

    socket statistics ( service,port,..): 
                --- same as netstat ---
        -$ss -pta  -----> all tcp sockets with their services

                - Options : 
                        -n Show numbers instead of names for interfaces and ports.
                        -t Show TCP sockets.
                        -u Show UDP sockets.
                        -l Show only listening sockets.
                        -a Show all (listening and established) sockets.
                        -p Show the process using the sockets.

#################################################### Cheat sheet (networking): ###########################################

        ip command:
            - Display information about network interfaces:
                - $ip addr show
            - Display routing table:
                - $ip route show
            - Configure IP address for an interface:
                - $ip addr add <ip_address>/<netmask> dev <interface_name>
            - Remove IP address from an interface:
                - $ip addr del <ip_address>/<netmask> dev <interface_name>

    nmcli command:
            - Display a list of all network interfaces:
                - $nmcli device
            - Display detailed information about a specific interface:
                - $nmcli device show <interface_name>
            - Connect to a Wi-Fi network:
                - $nmcli device wifi connect <SSID> password <password>
            - Modify network settings:
                - $nmcli connection modify <connection_name> <setting_key> <setting_value>

    nmtui command:
            - Open the Network Manager Text User Interface:
                - $nmtui
            - Edit a network connection:
                - $nmtui edit
            - Activate a network connection:
                - $nmtui activate
            - Deactivate a network connection:
                - $nmtui deactivate

    systemctl command:
            - Display the status of network services:
                - $systemctl list-units --type=service | grep network


###################################################### System Maintenance : #####################################

    - $shutdown // shut down system
    - $init 
    - $reboot
    - $halt /// forcing immediate shutdown
    - $hostnamectl set-hostname {new_host_name} ( shell reboot needed)
    - $timedatectl ----> provides infos about time, date, timezone,....
    - $timedatectl set-time 'YYYY-MM-DD XX:XX:XX' -----> to set time
    - $timedatectl set-ntp true ----> to activate ntp service

    - For Storage : 

        - (MBR) vs (GPT)  : 
                - MBR : 4 primary partitions or 3 primary + 1 extended (logical volums)
                - GPT : up-to 128 primary partitions + more features ...

        - /etc/fstab  -----> it contains a list of disks used at startup and the partitions of those disks. For each partition,
    it indicates how it will be used and integrated into the global file system tree.

        - When Adding a Disk : 
            - $fdisk -l ----> to verify its there (list all disks)
            - $fdisk /dev/{Disk}  ------> tool (cmd) to create new partition of the disk
            - $partprobe ----> for informing the kernel about table changes
    ( hit w at the end to write your modifications from ram to disk)
            - $mkfs.{the_file_system} {disk_partition}  ----> to create a file system for the partition
            - $mount :
                    - $mount {disk_partition} {mount_path}----> mount disk ( not persistant !)
                    - $mount -a ----> to go througth all fstab file 
            - for a persistant way : 
                - edit the /etc/fstab by adding new line for the partition :
                    line structure : 
                        { Device    Mount_Point    File_System_Type     Options(mount options if any)     Backup_Operation[0 --> for no backup]    File_System_Check_Order[0 --> for do not check fs] }


    - For Firewall Maintenance : 
        - firewalld vs iptables : 1\ firewalld's allows the simultaneous effecting of changes in runtime without having to reboot the system 
                                  2\  Firewalld is XML based and runs iptables under its hood together with its own command line and configuration file
                                    
        - $firewall-config  ----> to bring a Gui for firewall configuration 
        - $firewall-cmd  -----> to bring a cmd for firewall configuration 


    - For Certificat at OS level : 
        - $cp path/to/certificat /etc/pki/ca-trust/source/anchors/
        - $sudo upda te-ca-trust


    - System Run Levels {0...6} : 
        - $init {run_level} ---> execute the run level cmd or brings to that run level
        - $who - r -----> what run level u're in 

        - Run Level Files are in : /etc/rc.d/*



Report & Support :

    - $sosreport  -----> redhat special report to send to support representative



Shell history :

    - history file : /home/{user}/.bash_history
    - $history /// to view your commands history
    - $!{cmd_history_number} // to re execute a cmd 



Package installation : 

    - Minor version :

        - $yum install {package name} options{-y=yes for every qstn} : download + installation of packages (requires internet connection)
            File Location of remote repos : /etc/yum.repos.d
            Configuration file : /etc/yum.config

        - $rpm (redhat package manager): installation/removal of local packed tha has been downloaded befor ! ( no internet connection required)
        - $rpm -qa ----> get all installed packages
        - $rpm -qi {package name} ----> get informations about the package
        - $rpm -qf [path_to_command]  -----> provides infos abourt the package responsible for this command
        - $rpm -e {package name} -----> to delete a package 

            *** Note : we must be careful when deleting a package ---> it might be dependent on another one !!


System Update :

    - Minor version : 

        - $yum update/upgrade options{-y=yes for every qstn}
        - upgrade : delete old packages
        - update : Preserve old packages


Rolling Back : 

    - A Package : 

        - $yum history undo {package_id---> got from $yum history}

    - An Update : 
        - it is not recommended to roll back an update or upgrade ----> might cause instability in the system (redhat recommendation)
        - $yum history undo {package_id---> got from $yum history}


Mail Sending (sendmail package) : 

    -Installation : 

        -install sendmail package
        -install sendmail-cf package

    - Files : 
            ## comments starts with {dnl} keyword 
        -/etc/mail/sendmail.mc ( mail Configuration) --> to be compiled
        -/etc/mail/sendmail.cf (configuration file)


    ############################### root password reseting #######################################

        1\ reboot the system - at the grub menu press (e) key to Interrupt the boot process
        2\ Edit kernel boot params :
                - line 16 at the end add : rd.break
                - [ctrl+x] ----> to start the system with the changed parameters
                
        3\ When the switch prompt appears : 
                - $mount -o rw,remount /sysroot ----> to remount the root filesystem wuth write permissions
                - $chroot /sysroot  -----> change env to root 

        4\ [sh-4.4#] prompt appears : $passwd to change password 
        
        5\ touch /.autorelabel ------> Enable the SELinux relabeling process on the next system boot

        6\ exit


    ############################### LVM #######################################"

    Logical Volume Management : 

            - could be done on a partition, full disk.
            - to use a block device for LVM it must be initialized as physical Volume
            - LVM DATA :
                    - LVM label : it's placed in second 512bytes sector ( or first 4 sectors) and
                        - it contains : random unique identifier (uuid) + size of block device(in bytes) 
                        + metadata storage location
                    - LVM Metadata : contains the configuration details of the LVM volume groups on your system
                        - By default, an identical copy of the metadata is maintained in every metadata area in every
                        physical volume within the volume group.
                        - LVM metadata is small and stored as ASCII.
            - Actual DATA : 
                    - is stored after LVM label & Metadata 


    Steps to create lv : 
         - Initialize the PV : 
                   - $pvcreate {disk/partition}
         - Volum Group ( VG ) Creation : 
                   - $vgcreate {VG_Name} /dev/pv1 /dev/pv2 .....
         - Logical Volum Creation :
                   - $lvcreate -L size{M,G,..} -n {lv_name}  vg_name.

Steps to Extend : 
         - $vgextend vg_group pv_to_add
         - $lvextend -L +size{M,G,..} -r(auto install fs) /dev/gv/lv

    ######## cheat sheet :

    lvcreate - create a logical volume
        Options:
            -L <size> : specify the size of the logical volume
            -n <name> : specify the name of the logical volume
            -p <permission> : set permission for the logical volume
            -V <size> : specify the size of the logical volume in units

    lvdisplay - display information about logical volumes

        Options:
            -v : display verbose information
            -a : display information about all logical volumes

    lvremove - remove a logical volume
        Options:
            -f : force removal of the logical volume

    lvrename - rename a logical volume
        Options:
            -n <newname> : specify the new name of the logical volume

    lvresize - resize a logical volume
        Options:
            -L <size> : specify the new size of the logical volume
            -l <percentage> : specify the new size as a percentage of the current size
            -r : resize the file system after resizing the logical volume

    lvscan - scan for LVM logical volumes
        Options:
            -v : display verbose information

    pvcreate - create a physical volume
        Options:
            -v : display verbose information
            -f : force creation of the physical volume

    pvdisplay - display information about physical volumes
        Options:
            -v : display verbose information
            -a : display information about all physical volumes

    pvremove - remove a physical volume
        Options:
            -f : force removal of the physical volume

    pvresize - resize a physical volume
        Options:
            -v : display verbose information
            -u : resize the physical volume to the size of the underlying disk

    vgcreate - create a volume group
        Options:
            -n <name> : specify the name of the volume group
            -s <size> : specify the physical extent size of the volume group

    vgdisplay - display information about volume groups
        Options:
            -v : display verbose information
            -a : display information about all volume groups

    vgremove - remove a volume group
        Options:
            -f : force removal of the volume group

    vgrename - rename a volume group
        Options:
            -n <newname> : specify the new name of the volume group

